knitr::opts_chunk$set(echo = TRUE)
options(warn=-1)
data <- read.csv("./rrp1data/activity.csv", colClasses = c("numeric", "Date",
"integer"))
data <- read.csv("./activity.csv", colClasses = c("numeric", "Date",
"integer"))
data <- read.csv("/activity.csv", colClasses = c("numeric", "Date",
"integer"))
data <- read.csv("/activity.csv", colClasses = c("numeric", "Date",
"integer"))
data <- read.csv("activity/activity.csv", colClasses = c("numeric", "Date",
"integer"))
data <- read.csv("activity.csv", colClasses = c("numeric", "Date",
"integer"))
steps_day <- ddply(data[, 1:2], .(format(date, "%d")), function(df) sapply(na.omit(df),
mean))
## we will need plotting library
library(plyr)
library(ggplot2)
steps_day <- ddply(data[, 1:2], .(format(date, "%d")), function(df) sapply(na.omit(df),
mean))
qplot(setps_day$steps, main = "Mean Number Steps/Day", xlab = "Steps", binwidth = 5)
steps.day <- ddply(data[, 1:2], .(format(date, "%d")), function(df) sapply(na.omit(df),
mean))
qplot(steps.day$steps, main = "Mean Number Steps/Day", xlab = "Steps", binwidth = 5)
knitr::opts_chunk$set(echo = TRUE)
options(warn=-1)
data <- read.csv("activity.csv", colClasses = c("numeric", "Date",
"integer"))
## we will need plotting library
library(plyr)
library(ggplot2)
steps.day <- ddply(data[, 1:2], .(format(date, "%d")), function(df) sapply(na.omit(df),
mean))
qplot(steps.day$steps, main = "Mean Number Steps/Day", xlab = "Steps", binwidth = 5)
mean(steps.day$steps, na.rm = T)
median(steps.day$steps, na.rm = T)
steps_day <- tapply(data$steps, data$date, sum)
qplot(steps_day, xlab = "average steps per day", ylab = "number of days", binwidth = 1000,
main = "Ignoring missing data")
mean(steps_day$steps, na.rm = T)
mean(data$steps, na.rm = T)
mean(data$steps, na.rm = T)
mean(steps_day, na.rm = T)
median(steps_day, na.rm = T)
data <- read.csv("activity.csv", colClasses = c("numeric", "Date",
"integer"))
data = na.omit(data)
## we will need plotting library
library(plyr)
library(ggplot2)
steps_day <- tapply(data$steps, data$date, sum)
qplot(steps_day, xlab = "average steps per day", ylab = "number of days", binwidth = 1000,
main = "Ignoring missing data")
stepsday = ddply(data, "interval", summarize, steps = mean(steps))
plot(stepsday$interval, stepsday$steps, type = "l", xlab = "Interval", ylab = "Mean Steps/Day",
main = "")
stepsday$interval[max(stepsday$steps)]
library("ggplot2")
hist <- ggplot(data, aes(x = date, y = total)) + geom_histogram(stat = "identity",
binwidth = 1, fill = "blue", position = "dodge") + labs(title = "Total number of steps each day",
y = "Total number of steps") + scale_x_date(breaks = "1 week") + theme_bw() +
theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank()) +
theme(axis.text.x = element_text(angle = 90))
print(hist)
TstepAday <- ddply(data, .(date), summarize, total = sum(steps))
library("ggplot2")
hist <- ggplot(TstepAday, aes(x = date, y = total)) + geom_histogram(stat = "identity",
binwidth = 1, fill = "blue", position = "dodge") + labs(title = "Total number of steps each day",
y = "Total number of steps") + scale_x_date(breaks = "1 week") + theme_bw() +
theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank()) +
theme(axis.text.x = element_text(angle = 90))
print(hist)
stepsday <- ddply(data, .(interval), summarize, mean = mean(steps, na.rm = TRUE))
timeplot <- ggplot(stepsday, aes(x = interval, y = mean)) + geom_line() +
labs(title = "Average number of steps  across all day at each 5-min interval",
y = "Average number of steps") + ##### annotate the plot
geom_vline(aes(xintercept = stepsday[which.max(stepsday$mean), 1]), colour = "blue") +
scale_x_continuous(breaks = c(0, 500, stepsday[which.max(stepsday$mean),
1], 1000, 1500, 2000, max(stepsday$interval))) + annotate("point", x = stepsday[which.max(stepsday$mean),
1], y = max(stepsday$mean), size = 3, colour = "blue") + geom_text(x = stepsday[which.max(stepsday$mean),
1], y = max(stepsday$mean), size = 5, colour = "blue", label = max(stepsday$mean),
vjust = 0, hjust = -0.1) + theme_bw()
print(timeplot)
stepsday$interval[max(stepsday$steps)]
for (i in imputedata$date) {
imputedata[imputedata$date == i, ][, 1] <- stepsday[, 2]
}
imputedata <- data[is.na(data$steps) == T, ]
for (i in imputedata$date) {
imputedata[imputedata$date == i, ][, 1] <- stepsday[, 2]
}
data_new  <- rbind(data[is.na(data$steps) == F, ], imputedata)
stepsday_new <- ddply(data_new, .(date), summarize, total = sum(steps))
hist2 <- ggplot(stepsday_new, aes(x = date, y = total)) + geom_histogram(stat = "identity",
binwidth = 1, fill = "blue") + labs(title = "Total number of steps each day",
y = "Total number of steps") + scale_x_date(breaks = "1 week") + theme_bw() +
theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank()) +
theme(axis.text.x = element_text(angle = 90))
print(hist)
mean(stepsday_new$total)
median(stepsday_new$total)
library("chron")
install.packages("chron")
library("chron")
newdata$weekday[is.weekend(newdata$date) == F] <- "weekday"
library("chron")
newdata$weekday[is.weekend(newdata$date) == F] <- "weekday"
library("chron")
data_new$weekday[is.weekend(data_new$date) == F] <- "weekday"
data_new$weekday[is.weekend(data_new$date) == T] <- "weekend"
series <- ddply(data_new, .(interval, weekday), summarize, mean = mean(steps))
library("lattice")
series <- transform(series, weekday = factor(weekday))
timeplot2 <- xyplot(mean ~ interval | weekday, data = series, layout = c(1,
2), main = "Average number of steps at each 5-min interval", panel = function(x,
y, ...) {
panel.lines(x, y, col = "blue")
})
print(timeplot2)
